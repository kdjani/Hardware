<Page
    x:Class="IncrementalLoadingSample.MainPage"
    IsTabStop="false"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:controls="using:TriGemini.Controls"
    mc:Ignorable="d">

    <Grid Background="{StaticResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
<!--        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
-->
        <ListView x:Name="contentList"
                  Margin="0,0,800,100"
                  Grid.Row="0"
                  CanReorderItems="False" 
                  CanDragItems="False" 
                  SelectionMode="None" 
                  IsItemClickEnabled="True"
                  DataFetchSize="1.5"
                  IncrementalLoadingThreshold="1"                                            
                  Padding="50"
                  ItemsSource="{Binding Gifs}">
            <ListView.Transitions>
                <TransitionCollection>
                    <EntranceThemeTransition />
                    <ContentThemeTransition />
                </TransitionCollection>
            </ListView.Transitions>
            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapGrid Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid Width="300" Height="300" Background="LightGray">
                        <controls:AnimationImage VideoFile="{Binding file}"  Margin="10"  Width="300" Height="300" Tapped="AnimationImage_Tapped"/>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <MediaElement x:Name="Scenario1MediaElement" Grid.Row="0" Grid.Column="1" Height="300" Width="640" />
    </Grid>
</Page>


using System;
using System.Collections.Generic;
using System.Linq;
using Windows.Graphics.Imaging;
using Windows.Storage;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media.Imaging;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.UI.Xaml.Media.Animation;
using Windows.Storage.Streams;
using Windows.Security.Cryptography;
using Windows.Security.Cryptography.Core;
using System.Threading.Tasks;

namespace TriGemini.Controls
{
    /// <summary>
    ///  AnimationImage control
    /// </summary>
    public sealed partial class AnimationImage : UserControl
    {
        #region Private Fields
        private static readonly DependencyProperty _videoFile = DependencyProperty.Register
        (
          "VideoFile", typeof(StorageFile), typeof(AnimationImage), new PropertyMetadata(String.Empty, VideoFileChanged)
        );

        private readonly List<WriteableBitmap> _bitmapFrames = new List<WriteableBitmap>();
        private bool _playOnLoad = true;
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the url of the image e.g. "/Assets/MyAnimation.gif"
        /// </summary>
        public StorageFile VideoFile
        {
            get
            {
                return (StorageFile)GetValue(_videoFile);
            }
            set
            {
                SetValue(_videoFile, value);
            }
        }

        private List<WriteableBitmap> writeableBitmap;
        private List<BitmapFrame> listOfFrames;
        private BitmapTransform bitmapTransform;
        private List<DiscreteObjectKeyFrame> keyFrame;

        public bool PlayOnLoad
        {
            get
            {
                return _playOnLoad;
            }
            set
            {
                _playOnLoad = value;
            }
        }
        #endregion

        #region Constructors
        public AnimationImage()
        {
            this.InitializeComponent();
            SetupAnimationDataStructures();
            anim = new ObjectAnimationUsingKeyFrames();
            keyFrame = new List<DiscreteObjectKeyFrame>();

            for (int i = 0; i < ApplicationConfiguration.Configuration.Category1Frames; i++)
            {
                keyFrame.Add(new DiscreteObjectKeyFrame());
            }

            ts = new TimeSpan();

            this.animationLoaded = false;

            //WatchForAvaialableAnimations();

            this.thumbnailMode = true;
        }


        async private void SetupAnimationDataStructures()
        {
            this.writeableBitmap = new List<WriteableBitmap>();

            for (int i = 0; i < ApplicationConfiguration.Configuration.Category1Frames; i++)
            {
                this.writeableBitmap.Add(new WriteableBitmap(ApplicationConfiguration.Configuration.ImageWidth, ApplicationConfiguration.Configuration.ImageHeight));
            }

            this.bitmapTransform = new BitmapTransform();

            listOfFrames = new List<BitmapFrame>();
        }

        private ObjectAnimationUsingKeyFrames anim;

        private TimeSpan ts;

        private bool animationLoaded;

        #endregion

        #region Private Methods

        private async void WatchForAvaialableAnimations()
        {
            while (true)
            {
                await Task.Delay(TimeSpan.FromSeconds(3)); // TODO
                if (this.animationLoaded)
                {
                    this.animationLoaded = false;
                    SetupAnimation();
                }
            }
        }

        private bool thumbnailMode;

        private void SetupAnimation()
        {
            BuildStoryBoard();

            if (PlayOnLoad)
            {
                storyboard.Begin();

                if (ImageLoaded != null)
                {
                    ImageLoaded(this, null);
                }
            }
        }

        private async void LoadNewAnimation()
        {
            if (VideoFile == null)
            {
                return;
            }

            var thumbnail =  await VideoFile.GetThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode.VideosView);

            WriteableBitmap image = new WriteableBitmap((int)thumbnail.OriginalWidth, (int)thumbnail.OriginalHeight);
            image.SetSource(thumbnail);

            _bitmapFrames.Add(image);

            this.thumbnailMode = true;
            SetupAnimation();

            _bitmapFrames.Clear();

            try
            {
                this.animationLoaded = false;

                // TODO Get from library
                string hash = ComputeMD5(VideoFile.Path);
                StorageFolder storageFolder = null;
                storageFolder = await ApplicationData.Current.LocalFolder.GetFolderAsync(hash);
                IReadOnlyList<StorageFile> fileList = await storageFolder.GetFilesAsync();
                foreach (StorageFile sampleFile in fileList)
                {
                    using (var res = await sampleFile.OpenAsync(FileAccessMode.Read))
                    {
                        var decoder = await BitmapDecoder.CreateAsync(BitmapDecoder.PngDecoderId, res);
                        var frame = await decoder.GetFrameAsync(0);
                        var writeableBitmap = new WriteableBitmap((int)decoder.OrientedPixelWidth, (int)decoder.OrientedPixelHeight);

                        //  Extract the pixel data and fill the WriteableBitmap with them
                        var bitmapTransform = new BitmapTransform();
                        var pixelDataProvider = await frame.GetPixelDataAsync(BitmapPixelFormat.Bgra8, decoder.BitmapAlphaMode, bitmapTransform, ExifOrientationMode.IgnoreExifOrientation, ColorManagementMode.DoNotColorManage);
                        var pixels = pixelDataProvider.DetachPixelData();

                        using (var stream = writeableBitmap.PixelBuffer.AsStream())
                        {
                            stream.Write(pixels, 0, pixels.Length);
                        }

                        //  Finally we have a frame (WriteableBitmap) that can internally be stored.
                        _bitmapFrames.Add(writeableBitmap);
                    }
                }

                this.animationLoaded = true;
                this.thumbnailMode = false;
                SetupAnimation();
            }
            catch (Exception e)
            {
                //  Yeah, I know this is kinda' "cowboyish" - but hey, I don't want it to fail in the designer!
                if (!Windows.ApplicationModel.DesignMode.DesignModeEnabled)
                {
                    throw;
                }
            }
        }

        public static string ComputeMD5(string str)
        {
            var alg = HashAlgorithmProvider.OpenAlgorithm("MD5");
            IBuffer buff = CryptographicBuffer.ConvertStringToBinary(str, BinaryStringEncoding.Utf8);
            var hashed = alg.HashData(buff);
            var res = CryptographicBuffer.EncodeToHexString(hashed);
            return res;
        }

        private void BuildStoryBoard()
        {
            //  Clear the story board, if it has previously been filled
            if (storyboard.Children.Count > 0)
            {
                storyboard.Stop();
                storyboard.Children.Clear();
            }

            //  Now create the animation as a set of ObjectAnimationUsingKeyFrames (I love this name!)
            anim.BeginTime = TimeSpan.FromSeconds(0);

            var speed = TimeSpan.FromMilliseconds(ApplicationConfiguration.Configuration.Category1Delay);

            // Create each DiscreteObjectKeyFrame and advance the KeyTime by 100 ms (=10 fps) and add it to the storyboard.
            anim.KeyFrames.Clear();
            for (int frameIndex = 0; frameIndex < 5; frameIndex++)
            {
                keyFrame[frameIndex].KeyTime = KeyTime.FromTimeSpan(ts);
                keyFrame[frameIndex].Value = _bitmapFrames[frameIndex];
                ts = ts.Add(speed);
                anim.KeyFrames.Add(keyFrame[frameIndex]);

                if (this.thumbnailMode)
                {
                    break;
                }
            }

            //  Connect the image control with the story board
            Storyboard.SetTarget(anim, image);
            Storyboard.SetTargetProperty(anim, "Source");

            //  And finally add the animation-set to the storyboard
            if (storyboard.Children.Count == 0)
            {
                storyboard.Children.Add(anim);
            }
            else
            {
                storyboard.Children[0] = anim;
            }
        }

        private static void VideoFileChanged(object sender, DependencyPropertyChangedEventArgs args)
        {
            if ((((Windows.UI.Xaml.Controls.UserControl)(sender)).Content).Visibility == Visibility.Visible)
            {
                //http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh780657.aspx
                var control = (AnimationImage)sender;
                control.LoadNewAnimation();
            }
            else
            {

            }
        }
        #endregion

        #region Public Events
        /// <summary>
        /// Fired whenever the image has loaded
        /// </summary>
        public EventHandler ImageLoaded;
        #endregion
    }
}